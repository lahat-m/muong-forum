generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum LocationType {
  ONLINE
  ONSITE
}

model User {
  id        Int      @id @default(autoincrement())
  username  String?  @unique
  email     String   @unique
  firstName String?
  lastName  String?
  password  String
  isEmailVerified Boolean  @default(false)
  verificationToken String? @unique
  tokenExpiresAt DateTime?
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  emailVerifications EmailVerification[]
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id            Int                 @id @default(autoincrement())
  eventPoster   String?
  title         String
  eventFocus    String?
  description   String
  guestName     String
  guestDesc     String?
  date          DateTime
  location      String
  locationType  LocationType
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")

  registrations EventRegistration[]
}

model Participant {
  id    Int    @id @default(autoincrement())
  name  String
  email String
  phone String
  sex   String

  registrations EventRegistration[]
}

model EventRegistration {
  id               Int      @id @default(autoincrement())
  eventId          Int
  participantId    Int
  registrationDate DateTime @default(now()) @map("registration_date")

  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant Participant @relation(fields: [participantId], references: [id])

  @@unique([eventId, participantId])
}