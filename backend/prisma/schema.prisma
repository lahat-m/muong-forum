generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum LocationType {
  ONLINE
  ONSITE
}

model User {
  id                 Int                 @id @default(autoincrement())
  username           String?             @unique
  email              String              @unique
  firstName          String?
  lastName           String?
  password           String
  isEmailVerified    Boolean             @default(false)
  verificationToken  String?             @unique
  tokenExpiresAt     DateTime?
  role               UserRole            @default(USER)
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")

  emailVerifications EmailVerification[]
  passwordResetTokens PasswordResetToken[]
  studentProfile    Student?
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// New model for password reset functionality
model PasswordResetToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      // Changed to Int to match User id type
  tokenHash String   
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usedAt    DateTime?

  @@index([userId])
  @@index([tokenHash])
}

model Event {
  id            Int                 @id @default(autoincrement())
  eventPoster   String?
  title         String
  eventFocus    String?
  description   String
  guestName     String
  guestDesc     String?
  date          DateTime
  location      String
  locationType  LocationType
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")

  registrations EventRegistration[]
}

model Participant {
  id    Int    @id @default(autoincrement())
  name  String
  email String
  phone String
  sex   String

  registrations EventRegistration[]
}

model EventRegistration {
  id               Int      @id @default(autoincrement())
  eventId          Int
  participantId    Int
  registrationDate DateTime @default(now()) @map("registration_date")

  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participant Participant @relation(fields: [participantId], references: [id])

  @@unique([eventId, participantId])
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  userId    String?
  ipAddress String?
  userAgent String?
  metaData  Json?
  createdAt DateTime @default(now())

  @@index([action])
  @@index([userId])
  @@index([createdAt])
}


model Student {
   id                Int           @id @default(autoincrement())
  userId            Int           @unique // One-to-one relation with User
  name              String
  registrationNumber String        @unique
  course            String
  faculty           String
  graduated         Boolean       @default(false)
  enrollmentYear    Int
  profilePhoto     String?   
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills            StudentSkill[] // One-to-many relation with StudentSkill

  @@map("students") // Optional: map to a different table name in the DB
}

model StudentSkill {
  id                Int      @id @default(autoincrement())
  studentId         Int
  name              String
  yearsOfExperience Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  student           Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, name]) // A student should not have duplicate skills by name
  @@map("student_skills") // Optional: map to a different table name in the DB
}